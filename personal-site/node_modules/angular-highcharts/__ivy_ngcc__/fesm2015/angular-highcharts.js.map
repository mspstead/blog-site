{"version":3,"sources":["/Users/mike/Documents/Website/personal-site/node_modules/angular-highcharts/fesm2015/angular-highcharts.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgUC,+KAKC;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqCD,mGAGC;;;;;;;;;;kCAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuBD,QAUC;;;;;;;;;;;;;;;;sEAIA","file":"angular-highcharts.js","sourcesContent":["import * as Highcharts from 'highcharts';\nimport { chart, mapChart, stockChart } from 'highcharts';\nimport { AsyncSubject } from 'rxjs';\nimport { Directive, ElementRef, Input, InjectionToken, Injectable, Inject, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/chart.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Chart {\n    /**\n     * @param {?=} options\n     */\n    constructor(options = { series: [] }) {\n        this.options = options;\n        this.refSubject = new AsyncSubject();\n        this.ref$ = this.refSubject.asObservable();\n    }\n    /**\n     * Add Point\n     * @param {?} point         Highcharts.DataPoint, number touple or number\n     * @param {?=} serieIndex    Index position of series. This defaults to 0.\n     * @param {?=} redraw        Flag whether or not to redraw point. This defaults to true.\n     * @param {?=} shift         Shift point to the start of series. This defaults to false.\n     * @return {?}\n     */\n    addPoint(point, serieIndex = 0, redraw = true, shift = false) {\n        this.ref$.subscribe((/**\n         * @param {?} chart\n         * @return {?}\n         */\n        chart => {\n            if (chart.series.length > serieIndex) {\n                chart.series[serieIndex].addPoint(point, redraw, shift);\n            }\n        }));\n    }\n    /**\n     * Add Series\n     * @param {?} series        Series Configuration\n     * @param {?=} redraw        Flag whether or not to redraw series. This defaults to true.\n     * @param {?=} animation     Whether to apply animation, and optionally animation configuration. This defaults to false.\n     * @return {?}\n     */\n    addSeries(series, redraw = true, animation) {\n        this.ref$.subscribe((/**\n         * @param {?} chart\n         * @return {?}\n         */\n        chart => {\n            chart.addSeries(series, redraw, animation);\n        }));\n    }\n    /**\n     * Remove Point\n     * @param {?} pointIndex    Index of Point\n     * @param {?=} serieIndex    Specified Index of Series. Defaults to 0.\n     * @return {?}\n     */\n    removePoint(pointIndex, serieIndex = 0) {\n        this.ref$.subscribe((/**\n         * @param {?} chart\n         * @return {?}\n         */\n        chart => {\n            if (chart.series.length > serieIndex && chart.series[serieIndex].data.length > pointIndex) {\n                chart.series[serieIndex].removePoint(pointIndex, true);\n            }\n        }));\n    }\n    /**\n     * Remove Series\n     * @param {?} seriesIndex    Index position of series to remove.\n     * @return {?}\n     */\n    removeSeries(seriesIndex) {\n        this.ref$.subscribe((/**\n         * @param {?} chart\n         * @return {?}\n         */\n        chart => {\n            if (chart.series.length > seriesIndex) {\n                chart.series[seriesIndex].remove(true);\n            }\n        }));\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    init(el) {\n        if (!this.ref) {\n            chart(el.nativeElement, this.options, (/**\n             * @param {?} chart\n             * @return {?}\n             */\n            chart => {\n                this.refSubject.next(chart);\n                this.ref = chart;\n                this.refSubject.complete();\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this.ref) {\n            this.options = this.ref.options;\n            this.ref.destroy();\n            this.ref = undefined;\n            // new init subject\n            this.refSubject = new AsyncSubject();\n            this.ref$ = this.refSubject.asObservable();\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Chart.prototype.refSubject;\n    /** @type {?} */\n    Chart.prototype.ref$;\n    /** @type {?} */\n    Chart.prototype.ref;\n    /**\n     * @type {?}\n     * @private\n     */\n    Chart.prototype.options;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/mapchart.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */\nclass MapChart {\n    /**\n     * @param {?=} options\n     */\n    constructor(options = { series: [] }) {\n        this.options = options;\n        this.refSubject = new AsyncSubject();\n        this.ref$ = this.refSubject.asObservable();\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    init(el) {\n        if (!this.ref) {\n            mapChart(el.nativeElement, this.options, (/**\n             * @param {?} chart\n             * @return {?}\n             */\n            chart => {\n                this.refSubject.next(chart);\n                this.ref = chart;\n                this.refSubject.complete();\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this.ref) {\n            this.options = this.ref.options;\n            this.ref.destroy();\n            this.ref = undefined;\n            // new init subject\n            this.refSubject = new AsyncSubject();\n            this.ref$ = this.refSubject.asObservable();\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MapChart.prototype.refSubject;\n    /** @type {?} */\n    MapChart.prototype.ref$;\n    /** @type {?} */\n    MapChart.prototype.ref;\n    /**\n     * @type {?}\n     * @private\n     */\n    MapChart.prototype.options;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/stockchart.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n *\n * @author Felix Itzenplitz\n * @author Timothy A. Perez (contributor)\n */\nclass StockChart {\n    /**\n     * @param {?=} options\n     */\n    constructor(options = { series: [] }) {\n        this.options = options;\n        this.refSubject = new AsyncSubject();\n        this.ref$ = this.refSubject.asObservable();\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    init(el) {\n        if (!this.ref) {\n            stockChart(el.nativeElement, this.options, (/**\n             * @param {?} chart\n             * @return {?}\n             */\n            chart => {\n                this.refSubject.next(chart);\n                this.ref = chart;\n                this.refSubject.complete();\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this.ref) {\n            this.options = this.ref.options;\n            this.ref.destroy();\n            this.ref = undefined;\n            // new init subject\n            this.refSubject = new AsyncSubject();\n            this.ref$ = this.refSubject.asObservable();\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    StockChart.prototype.refSubject;\n    /** @type {?} */\n    StockChart.prototype.ref$;\n    /** @type {?} */\n    StockChart.prototype.ref;\n    /**\n     * @type {?}\n     * @private\n     */\n    StockChart.prototype.options;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/chart.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ChartDirective {\n    /**\n     * @param {?} el\n     */\n    constructor(el) {\n        this.el = el;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (!changes.chart.isFirstChange()) {\n            this.destroy();\n            this.init();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.init();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroy();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (this.chart instanceof Chart || this.chart instanceof StockChart || this.chart instanceof MapChart) {\n            this.chart.init(this.el);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    destroy() {\n        if (this.chart instanceof Chart || this.chart instanceof StockChart || this.chart instanceof MapChart) {\n            this.chart.destroy();\n        }\n    }\n}\nChartDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[chart]'\n            },] }\n];\n/** @nocollapse */\nChartDirective.ctorParameters = () => [\n    { type: ElementRef }\n];\nChartDirective.propDecorators = {\n    chart: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    ChartDirective.prototype.chart;\n    /**\n     * @type {?}\n     * @private\n     */\n    ChartDirective.prototype.el;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/chart.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet HIGHCHARTS_MODULES = new InjectionToken('HighchartsModules');\nclass ChartService {\n    /**\n     * @param {?} chartModules\n     */\n    constructor(chartModules) {\n        this.chartModules = chartModules;\n    }\n    /**\n     * @return {?}\n     */\n    initModules() {\n        this.chartModules.forEach((/**\n         * @param {?} chartModule\n         * @return {?}\n         */\n        chartModule => {\n            chartModule(Highcharts);\n        }));\n    }\n}\nChartService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nChartService.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [HIGHCHARTS_MODULES,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ChartService.prototype.chartModules;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/chart.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0 = [];\nclass ChartModule {\n    /**\n     * @param {?} cs\n     */\n    constructor(cs) {\n        this.cs = cs;\n        this.cs.initModules();\n    }\n}\nChartModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [ChartDirective],\n                declarations: [ChartDirective],\n                providers: [\n                    { provide: HIGHCHARTS_MODULES, useValue: ɵ0 },\n                    ChartService\n                ]\n            },] }\n];\n/** @nocollapse */\nChartModule.ctorParameters = () => [\n    { type: ChartService }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ChartModule.prototype.cs;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: angular-highcharts.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Chart, ChartDirective, ChartModule, HIGHCHARTS_MODULES, MapChart, StockChart, ChartService as ɵa };\n"]}